def eratosthenes_sieve(limit, &block)
  return enum_for(__method__, limit) unless block_given?
  primes = [2]
  nums = (primes.last..limit).to_a
  loop do
    nums.delete_if{|x| x % primes.last == 0 }
    break if nums.empty?
    break if nums.last < primes.last ** 2
    yield(nums.first)
    primes << nums.first
  end
  nums.each(&block)
end